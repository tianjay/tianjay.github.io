{"meta":{"title":"Tianjie's Blog","subtitle":"辛勤的小蜂，正在采蜜","description":"Learners","author":"Tian Jay","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"初学python的疑问","slug":"python函数的默认参数","date":"2017-06-15T03:14:06.000Z","updated":"2017-06-15T13:16:05.899Z","comments":true,"path":"2017/06/15/python函数的默认参数/","link":"","permalink":"http://yoursite.com/2017/06/15/python函数的默认参数/","excerpt":"#python初学函数的默认参数 以下函数例子： def foo(numbers=[]): numbers.append(9) print numbers *在这里，我们定义了一个 list （默认为空），给它加入9并且打印出&gt;来。 &gt;&gt;&gt; foo() [9] &gt;&gt;&gt; foo(numbers=[1,2]) [1, 2, 9] &gt;&gt;&gt; foo(numbers=[1,2,3]) [1, 2, 3, 9] #看起来还行吧？可是当我们不输入number 参数来调用 foo 函数#时，神奇的事情发生了： &gt;&gt;&gt; foo() # first time, like before [9] &gt;&gt;&gt; foo() # second time [9, 9] &gt;&gt;&gt; foo() # third time... [9, 9, 9] &gt;&gt;&gt; foo() # WHAT IS THIS BLACK MAGIC?! [9, 9, 9, 9] python的参数有可变的：比如列表，字典这些；还有不可变的int,tuple 的数据类型，他们做默认参数的时候要区分 因为在你每次给函数指定一个默认值的时候，Python都会存储这个值。如果在调用函数的时候重写了默认值，那么这个存储的值就不会被使用。当你不重写默认值的时候，那么Python就会让默认值引用存储的值（这个例子里的numbers）。它并不是将存储的值拷贝来为这个变量赋值。这个概念可能对初学者来说，理解起来会比较吃力，所以可以这样来理解：有两个变量，一个是内部的，一个是当前运行时的变量。现实就是我们有两个变量来用相同的值进行交互，所以一旦 numbers 的值发生变化也会改变Python里面保存的初始值的记录。 ##（这里的list发生了变化，而且没有传入赋值，直接用了存在的已经定义的numbers变量）## 遇到了，不要忘了类似这样解决： def foo(numbers=None): if numbers is None: #比较判断只能用none， isnum。。。都是错的 numbers = [] numbers.append(9) print numbers 还有以下的类似问题： def print_now(now=time.time()): print now 运行 &gt;&gt;&gt; print_now() 1373121487.91 &gt;&gt;&gt; print_now() 1373121487.91 &gt;&gt;&gt; print_now() 1373121487.91 ###解决是print 表达式应该是函数调用的方式（print(numbers)） 转盘网，百度网盘下的各种资源的搜索引擎","text":"#python初学函数的默认参数 以下函数例子： def foo(numbers=[]): numbers.append(9) print numbers *在这里，我们定义了一个 list （默认为空），给它加入9并且打印出&gt;来。 &gt;&gt;&gt; foo() [9] &gt;&gt;&gt; foo(numbers=[1,2]) [1, 2, 9] &gt;&gt;&gt; foo(numbers=[1,2,3]) [1, 2, 3, 9] #看起来还行吧？可是当我们不输入number 参数来调用 foo 函数#时，神奇的事情发生了： &gt;&gt;&gt; foo() # first time, like before [9] &gt;&gt;&gt; foo() # second time [9, 9] &gt;&gt;&gt; foo() # third time... [9, 9, 9] &gt;&gt;&gt; foo() # WHAT IS THIS BLACK MAGIC?! [9, 9, 9, 9] python的参数有可变的：比如列表，字典这些；还有不可变的int,tuple 的数据类型，他们做默认参数的时候要区分 因为在你每次给函数指定一个默认值的时候，Python都会存储这个值。如果在调用函数的时候重写了默认值，那么这个存储的值就不会被使用。当你不重写默认值的时候，那么Python就会让默认值引用存储的值（这个例子里的numbers）。它并不是将存储的值拷贝来为这个变量赋值。这个概念可能对初学者来说，理解起来会比较吃力，所以可以这样来理解：有两个变量，一个是内部的，一个是当前运行时的变量。现实就是我们有两个变量来用相同的值进行交互，所以一旦 numbers 的值发生变化也会改变Python里面保存的初始值的记录。 ##（这里的list发生了变化，而且没有传入赋值，直接用了存在的已经定义的numbers变量）## 遇到了，不要忘了类似这样解决： def foo(numbers=None): if numbers is None: #比较判断只能用none， isnum。。。都是错的 numbers = [] numbers.append(9) print numbers 还有以下的类似问题： def print_now(now=time.time()): print now 运行 &gt;&gt;&gt; print_now() 1373121487.91 &gt;&gt;&gt; print_now() 1373121487.91 &gt;&gt;&gt; print_now() 1373121487.91 ###解决是print 表达式应该是函数调用的方式（print(numbers)） 转盘网，百度网盘下的各种资源的搜索引擎","categories":[],"tags":[{"name":"玩蛇","slug":"玩蛇","permalink":"http://yoursite.com/tags/玩蛇/"}]},{"title":"阿斯达","slug":"firstmd","date":"2017-06-14T03:14:06.000Z","updated":"2017-06-14T11:42:09.564Z","comments":true,"path":"2017/06/14/firstmd/","link":"","permalink":"http://yoursite.com/2017/06/14/firstmd/","excerpt":"#这是我的第一个博文 ##添加图片 ###这是一张图片 无序列表 #####图片 图片为： ![](){ImgCap}{/ImgCap}&#39;上面用到 代码框 `` dasasdasd s 开头的四个空格或者一个TAB 也可以作代码 public class Blog { public int Id { get; set; } public string Subject { get; set; } } 链接为：[]() 有序列表 （也可在菜单栏点击生成） 这是粗体 引用用 &gt; 这hi是引用慎独 分割线 `用三个 “*” *** #请注意 ##二级标题的分割效果 ( Have a try by yourself)","text":"#这是我的第一个博文 ##添加图片 ###这是一张图片 无序列表 #####图片 图片为： ![](){ImgCap}{/ImgCap}&#39;上面用到 代码框 `` dasasdasd s 开头的四个空格或者一个TAB 也可以作代码 public class Blog { public int Id { get; set; } public string Subject { get; set; } } 链接为：[]() 有序列表 （也可在菜单栏点击生成） 这是粗体 引用用 &gt; 这hi是引用慎独 分割线 `用三个 “*” *** #请注意 ##二级标题的分割效果 ( Have a try by yourself)","categories":[],"tags":[{"name":"Canot see Drafts","slug":"Canot-see-Drafts","permalink":"http://yoursite.com/tags/Canot-see-Drafts/"}]},{"title":"artical","slug":"artical","date":"2017-06-14T03:14:06.000Z","updated":"2017-06-15T12:47:17.542Z","comments":true,"path":"2017/06/14/artical/","link":"","permalink":"http://yoursite.com/2017/06/14/artical/","excerpt":"","text":"","categories":[],"tags":[]}]}